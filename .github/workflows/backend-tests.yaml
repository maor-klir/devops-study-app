name: Backend Tests

on:
  pull_request:

jobs:
  check_paths:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.filter.outputs.backend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Conditional execution based on files modifies through a pull request
        uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            backend:
              - 'src/backend/**'
              - '.github/workflows/backend-tests.yaml'
  test:
    name: Test Backend
    needs: check_paths
    if: ${{ needs.check_paths.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: |
          uv sync --locked --dev

      - name: Ruff linting
        run: |
          uv run ruff check --output-format=github --target-version=py313 src tests
          uv run ruff format --diff --check --target-version=py313 src tests

      - name: Run tests with coverage
        run: |
          uv run pytest tests/ -v --cov=src/backend --cov-report=xml --cov-fail-under=80

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./src/backend/coverage.xml
          retention-days: 7
        if: ${{ always() }}

      - name: Coverage Report (as Markdown)
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./src/backend/coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: test-coverage
          recreate: true
          path: code-coverage-results.md

      - name: Run Backend Tests
        run: |
          uv run pytest

      - name: Build Docker image from Dockerfile
        run: docker build -t backend-app:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: "backend-app:latest"
          format: "table"
          exit-code: "0"
          # exit-code: '1' # Fail the workflow if vulnerabilities are found.
          # Very restrictive. Can be used in strict conditions
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

# Trigger E2E tests if the backend tests have passed
  trigger_e2e:
    name: Trigger E2E Tests
    needs: test
    if: success()
    uses: ./.github/workflows/e2e-tests.yaml